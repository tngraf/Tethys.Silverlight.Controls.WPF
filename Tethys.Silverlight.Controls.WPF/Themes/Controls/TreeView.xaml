<!-- ========================================================================
// Tethys                    Basic Services and Resources Development Library
// ==========================================================================
//
// A custom control library for WPF applications.
//
// ==========================================================================
// <copyright file="TreeView.xaml" company="Tethys">
// Copyright  2015 by T. Graf
//            All rights reserved.
//            Licensed under the Apache License, Version 2.0.
//            Unless required by applicable law or agreed to in writing, 
//            software distributed under the License is distributed on an
//            "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
//            either express or implied. 
// </copyright>
// 
// System ... Microsoft .Net Framework 4.5. 
// Tools .... Microsoft Visual Studio 2013
//
// ======================================================================= -->
    
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Tethys.Silverlight.Controls.WPF;component/Themes/Theme.Light.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
    
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ListBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource Control.Foreground}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border 
                        x:Name="Bd" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        SnapsToDevicePixels="true">
                        <ScrollViewer 
                            x:Name="_tv_scrollviewer_" 
                            Background="{TemplateBinding Background}" 
                            CanContentScroll="false" 
                            Focusable="false" 
                            HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter 
                                Property="Background" 
                                TargetName="Bd" 
                                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                            <Setter 
                                Property="CanContentScroll" 
                                TargetName="_tv_scrollviewer_" 
                                Value="true"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border 
                        Background="Transparent" 
                        Height="16" 
                        Padding="5,5,5,5" 
                        Width="16">
                        <Path 
                            x:Name="ExpandPath" 
                            Data="{StaticResource TreeArrow}" 
                            Fill="{DynamicResource TreeViewItem.TreeArrow.Static.Fill}" 
                            Stroke="{DynamicResource TreeViewItem.TreeArrow.Static.Stroke}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter 
                                Property="Fill" 
                                TargetName="ExpandPath" 
                                Value="{DynamicResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
                            <Setter 
                                Property="Stroke" 
                                TargetName="ExpandPath" 
                                Value="{DynamicResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter 
                                Property="Stroke" 
                                TargetName="ExpandPath" 
                                Value="{DynamicResource Control.AccentColor}"/>
                            <Setter 
                                Property="Fill" 
                                TargetName="ExpandPath" 
                                Value="{DynamicResource Control.AccentColor}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter 
                                Property="Stroke" 
                                TargetName="ExpandPath" 
                                Value="{DynamicResource Control.AccentColor}"/>
                            <Setter 
                                Property="Fill" 
                                TargetName="ExpandPath" 
                                Value="{DynamicResource Control.AccentColor}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter 
            Property="HorizontalContentAlignment" 
            Value="{Binding HorizontalContentAlignment, 
              RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter 
            Property="VerticalContentAlignment" 
            Value="{Binding VerticalContentAlignment, 
              RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter 
            Property="Padding" Value="1,0,0,0"/>
        <Setter 
            Property="Foreground" 
            Value="{DynamicResource Control.Foreground}"/>
        <Setter 
            Property="FocusVisualStyle" 
            Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton 
                            x:Name="Expander" 
                            ClickMode="Press" 
                            IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" 
                            Style="{StaticResource ExpandCollapseToggleStyle}"/>
                        <Border 
                            x:Name="Bd" 
                            Grid.Row="0"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            Grid.Column="1" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="true">
                            <ContentPresenter 
                                x:Name="PART_Header"
                                ContentSource="Header" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter 
                            x:Name="ItemsHost" 
                            Grid.ColumnSpan="2" 
                            Grid.Column="1" 
                            Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter 
                                Property="Visibility" 
                                TargetName="ItemsHost" 
                                Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter 
                                Property="Visibility" 
                                TargetName="Expander" 
                                Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter 
                                Property="Background" 
                                TargetName="Bd" 
                                Value="{DynamicResource Control.AccentColor}"/>
                            <Setter 
                                Property="Foreground" 
                                Value="{DynamicResource Control.HighlightedTextBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <!--
                            <Setter 
                                Property="Background" 
                                TargetName="Bd" 
                                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                            <Setter 
                                Property="Foreground" 
                                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                            -->
                            <Setter 
                                Property="Background" 
                                TargetName="Bd" 
                                Value="{DynamicResource ItemControl.Inactive.Background}"/>
                            <Setter 
                                Property="Foreground" 
                                Value="{DynamicResource ItemControl.Inactive.Foreground}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter 
                                Property="Foreground" 
                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>