<!-- ========================================================================
// Tethys.Silverlight.Controls.WPF
// ==========================================================================
//
// A custom control library for WPF applications.
//
// ==========================================================================
// <copyright file="ComboBox.xaml" company="Tethys">
// Copyright  2015 by T. Graf
//            All rights reserved.
//            Licensed under the Apache License, Version 2.0.
//            Unless required by applicable law or agreed to in writing, 
//            software distributed under the License is distributed on an
//            "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
//            either express or implied. 
// </copyright>
// 
// System ... Microsoft .Net Framework 4.5. 
// Tools .... Microsoft Visual Studio 2013
//
// ======================================================================= -->
    
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Tethys.Silverlight.Controls.WPF;component/Themes/Theme.Light.xaml" />
    </ResourceDictionary.MergedDictionaries>
    
    <Style x:Key="ComboBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle 
                        Margin="2" 
                        SnapsToDevicePixels="true" 
                        Stroke="{DynamicResource Control.Border.Highlighted}" 
                        StrokeThickness="1" 
                        StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Foreground" Value="{DynamicResource Control.Foreground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border 
                        x:Name="templateRoot" 
                        SnapsToDevicePixels="true"
                        Background="{DynamicResource Control.Background}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        BorderBrush="{DynamicResource Control.Border.Default}">
                        <Border
                            x:Name="splitBorder"
                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                            SnapsToDevicePixels="true" 
                            Margin="0"
                            HorizontalAlignment="Right" 
                            BorderThickness="1" 
                            BorderBrush="Transparent">
                            <Path x:Name="arrow"
                                  VerticalAlignment="Center"
                                  Margin="0" 
                                  HorizontalAlignment="Center" 
                                  Fill="{DynamicResource ComboBox.Static.Glyph}" 
                                  Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter 
                                Property="Background" 
                                TargetName="templateRoot"
                                Value="{DynamicResource Control.Background}"/>
                            <Setter 
                                Property="BorderBrush" 
                                TargetName="templateRoot"
                                Value="{DynamicResource ComboBox.Static.Editable.Border}"/>
                            <Setter 
                                Property="Background" 
                                TargetName="splitBorder" 
                                Value="{DynamicResource ComboBox.Static.Editable.Button.Background}"/>
                            <Setter 
                                Property="BorderBrush"
                                TargetName="splitBorder"
                                Value="{DynamicResource ComboBox.Static.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter
                                Property="Fill"
                                TargetName="arrow" 
                                Value="{DynamicResource ComboBox.MouseOver.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter 
                                Property="Background"
                                TargetName="templateRoot"
                                Value="{DynamicResource Control.Background}"/>
                            <Setter
                                Property="BorderBrush" 
                                TargetName="templateRoot" 
                                Value="{DynamicResource Control.Border.Highlighted}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter 
                                Property="Background" 
                                TargetName="templateRoot" 
                                Value="{DynamicResource Control.Background}"/>
                            <Setter 
                                Property="BorderBrush"
                                TargetName="templateRoot" 
                                Value="{DynamicResource Control.Border.Highlighted}"/>
                            <Setter 
                                Property="Background" 
                                TargetName="splitBorder"
                                Value="{DynamicResource Control.Border.Highlighted}"/>
                            <Setter
                                Property="BorderBrush" 
                                TargetName="splitBorder" 
                                Value="{DynamicResource Control.Border.Highlighted}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter
                                Property="Fill" 
                                TargetName="arrow" 
                                Value="{DynamicResource ComboBox.Pressed.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter 
                                Property="Background"
                                TargetName="templateRoot"
                                Value="{DynamicResource Control.Background}"/>
                            <Setter 
                                Property="BorderBrush" 
                                TargetName="templateRoot"
                                Value="{DynamicResource Control.Border.Highlighted}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter 
                                Property="Background"
                                TargetName="templateRoot" 
                                Value="{DynamicResource Control.Background}"/>
                            <Setter 
                                Property="BorderBrush"
                                TargetName="templateRoot"
                                Value="{DynamicResource Control.Border.Highlighted}"/>
                            <Setter 
                                Property="Background"
                                TargetName="splitBorder" 
                                Value="{DynamicResource Control.Border.Highlighted}"/>
                            <Setter 
                                Property="BorderBrush" 
                                TargetName="splitBorder" 
                                Value="{DynamicResource Control.Border.Highlighted}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter
                                Property="Fill" 
                                TargetName="arrow" 
                                Value="{DynamicResource ComboBox.Disabled.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter
                                Property="Background" 
                                TargetName="templateRoot" 
                                Value="{DynamicResource Control.Disabled.Background}"/>
                            <Setter
                                Property="BorderBrush" 
                                TargetName="templateRoot" 
                                Value="{DynamicResource Control.Disabled.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter 
                                Property="Background" 
                                TargetName="templateRoot" 
                                Value="{DynamicResource ComboBox.Disabled.Editable.Background}"/>
                            <Setter 
                                Property="BorderBrush" 
                                TargetName="templateRoot"
                                Value="{DynamicResource ComboBox.Disabled.Editable.Border}"/>
                            <Setter 
                                Property="Background"
                                TargetName="splitBorder" 
                                Value="{DynamicResource ComboBox.Disabled.Editable.Button.Background}"/>
                            <Setter 
                                Property="BorderBrush"
                                TargetName="splitBorder" 
                                Value="{DynamicResource ComboBox.Disabled.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition 
                    MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" 
                    Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup 
                x:Name="PART_Popup" 
                AllowsTransparency="true" 
                Grid.ColumnSpan="2" 
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                Margin="1" 
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" 
                Placement="Bottom">
                <Border 
                    x:Name="shadow" 
                    MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border 
                        x:Name="dropDownBorder" 
                        BorderBrush="{DynamicResource Control.Border.Highlighted}" 
                        BorderThickness="1" 
                        Background="{DynamicResource Control.Background}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid 
                                x:Name="grid" 
                                RenderOptions.ClearTypeHint="Enabled">
                                <Canvas 
                                    x:Name="canvas" 
                                    HorizontalAlignment="Left" 
                                    Height="0" 
                                    VerticalAlignment="Top" 
                                    Width="0">
                                    <Rectangle 
                                        x:Name="opaqueRect" 
                                        Fill="{Binding Background, ElementName=dropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=dropDownBorder}" 
                                        Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter 
                                    x:Name="ItemsPresenter" 
                                    KeyboardNavigation.DirectionalNavigation="Contained" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Border>
            </Popup>
            
            <ToggleButton 
                x:Name="toggleButton" 
                Grid.Column="0" Grid.ColumnSpan="2"
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                Background="{DynamicResource Control.Background}" 
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                Style="{StaticResource ComboBoxToggleButton}"/>
            <ContentPresenter 
                x:Name="contentPresenter" 
                Grid.Column="0"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                Content="{TemplateBinding SelectionBoxItem}" 
                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                IsHitTestVisible="false"
                Margin="{TemplateBinding Padding}" 
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter 
                    Property="Canvas.Top" 
                    TargetName="opaqueRect" 
                    Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter 
                    Property="Canvas.Left" 
                    TargetName="opaqueRect" 
                    Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
 
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Foreground" Value="{DynamicResource Control.Foreground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer 
                        x:Name="PART_ContentHost" 
                        Background="Transparent" 
                        Focusable="false" 
                        HorizontalScrollBarVisibility="Hidden" 
                        VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition 
                    MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                    Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup 
                x:Name="PART_Popup" 
                AllowsTransparency="true" 
                Grid.ColumnSpan="2" 
                IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" 
                Placement="Bottom">
                <Border
                    x:Name="shadow" 
                    MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border 
                        x:Name="dropDownBorder" 
                        BorderBrush="{DynamicResource Control.Border.Default}" 
                        BorderThickness="1" 
                        Background="{DynamicResource Control.Background}">
                        <ScrollViewer 
                            x:Name="DropDownScrollViewer">
                            <Grid 
                                x:Name="grid"
                                RenderOptions.ClearTypeHint="Enabled">
                                <Canvas 
                                    x:Name="canvas" 
                                    HorizontalAlignment="Left" 
                                    Height="0" 
                                    VerticalAlignment="Top" 
                                    Width="0">
                                    <Rectangle 
                                        x:Name="opaqueRect" 
                                        Fill="{Binding Background, ElementName=dropDownBorder}" 
                                        Height="{Binding ActualHeight, ElementName=dropDownBorder}" 
                                        Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter 
                                    x:Name="ItemsPresenter" 
                                    KeyboardNavigation.DirectionalNavigation="Contained" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Border>
            </Popup>
            
            <ToggleButton 
                x:Name="toggleButton" 
                Grid.Column="0"
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                Background="{TemplateBinding Background}" 
                Grid.ColumnSpan="2" 
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource ComboBoxToggleButton}"/>
            <Border 
                x:Name="border"
                Grid.Column="0"
                Background="{DynamicResource TextBox.Static.Background}" 
                Margin="{TemplateBinding BorderThickness}">
                <TextBox
                    x:Name="PART_EditableTextBox" 
                    Background="{DynamicResource Control.Background}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                    IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" 
                    Margin="{TemplateBinding Padding}" 
                    Style="{StaticResource ComboBoxEditableTextBox}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter 
                    Property="Canvas.Top" 
                    TargetName="opaqueRect" 
                    Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter 
                    Property="Canvas.Left" 
                    TargetName="opaqueRect" 
                    Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
 <Style TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource Control.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Control.Border.Default}"/>
        <Setter Property="Foreground" Value="{DynamicResource Control.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource Control.Foreground}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border
                        x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}"
                        Padding="{TemplateBinding Padding}" 
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter
                                Property="TextElement.Foreground" 
                                TargetName="Bd"
                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter 
                                Property="Background" 
                                TargetName="Bd" 
                                Value="{DynamicResource Control.AccentColor}"/>
                            <Setter 
                                Property="BorderBrush" 
                                TargetName="Bd" 
                                Value="{DynamicResource Control.Border.Highlighted}"/>
                            <Setter
                                Property="Foreground"
                                Value="{DynamicResource Control.HighlightedTextBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter 
                                Property="Background" 
                                TargetName="Bd"
                                Value="{DynamicResource Control.AccentColor}"/>
                            <Setter 
                                Property="BorderBrush" 
                                TargetName="Bd" 
                                Value="{DynamicResource Control.Border.Highlighted}"/>
                            <Setter
                                Property="Foreground"
                                Value="{DynamicResource Control.HighlightedTextBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter
                                Property="Background" 
                                TargetName="Bd" 
                                Value="{DynamicResource Control.AccentColor}"/>
                            <Setter 
                                Property="BorderBrush" 
                                TargetName="Bd" 
                                Value="{DynamicResource Control.Border.Highlighted}"/>
                            <Setter
                                Property="Foreground"
                                Value="{DynamicResource Control.HighlightedTextBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            
                            <Setter 
                                Property="Background" 
                                TargetName="Bd" 
                                Value="{DynamicResource ComboBoxItem.ItemsviewSelectedNoFocus.Background}"/>
                            <Setter 
                                Property="BorderBrush" 
                                TargetName="Bd" 
                                Value="{DynamicResource ComboBoxItem.ItemsviewSelectedNoFocus.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter 
                                Property="BorderBrush" 
                                TargetName="Bd" 
                                Value="{DynamicResource Control.Border.Highlighted}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter 
                                Property="Background"
                                TargetName="Bd" 
                                Value="{DynamicResource Control.AccentColor}"/>
                            <Setter 
                                Property="BorderBrush" 
                                TargetName="Bd" 
                                Value="{DynamicResource Control.Border.Highlighted}"/>
                            <Setter
                                Property="Foreground"
                                Value="{DynamicResource Control.HighlightedTextBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>