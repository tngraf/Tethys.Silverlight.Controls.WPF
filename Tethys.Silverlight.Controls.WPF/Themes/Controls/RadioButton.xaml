<!-- ========================================================================
// Tethys.Silverlight.Controls.WPF
// ==========================================================================
//
// A custom control library for WPF applications.
//
// ==========================================================================
// <copyright file="RadioButton.xaml" company="Tethys">
// Copyright  2015 by T. Graf
//            All rights reserved.
//            Licensed under the Apache License, Version 2.0.
//            Unless required by applicable law or agreed to in writing, 
//            software distributed under the License is distributed on an
//            "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
//            either express or implied. 
// </copyright>
// 
// System ... Microsoft .Net Framework 4.5. 
// Tools .... Microsoft Visual Studio 2013
//
// ======================================================================= -->
    
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Tethys.Silverlight.Controls.WPF;component/Themes/Theme.Light.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle 
                          Margin="2" 
                          SnapsToDevicePixels="true" 
                          Stroke="{DynamicResource Control.Border.Highlighted}" 
                          StrokeThickness="1" 
                          StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RadioOptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle 
                        Margin="14,0,0,0" 
                        SnapsToDevicePixels="true" 
                        Stroke="{DynamicResource Control.Border.Highlighted}"
                        StrokeThickness="1" 
                        StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    <Style x:Key="RadioButtonStyle" TargetType="{x:Type RadioButton}">
    -->
    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource RadioButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource Control.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid 
                        x:Name="templateRoot" 
                        Background="Transparent" 
                        SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border 
                            x:Name="radioButtonBorder" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            CornerRadius="100" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            Margin="1,1,2,1" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid 
                                x:Name="markGrid" 
                                Margin="2">
                                <Ellipse 
                                    x:Name="optionMark"
                                    Fill="{DynamicResource Control.Static.Glyph}" 
                                    MinWidth="6" MinHeight="6" 
                                    Opacity="0"/>
                            </Grid>
                        </Border>
                        
                        <ContentPresenter 
                            x:Name="contentPresenter" 
                            Grid.Column="1" 
                            Focusable="False" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            Margin="{TemplateBinding Padding}" 
                            RecognizesAccessKey="True" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter 
                                Property="FocusVisualStyle" 
                                Value="{DynamicResource RadioOptionMarkFocusVisual}"/>
                            <Setter 
                                Property="Padding" 
                                Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter 
                                Property="Background" 
                                TargetName="radioButtonBorder" 
                                Value="{DynamicResource Control.MouseOver}"/>
                            <Setter 
                                Property="BorderBrush" 
                                TargetName="radioButtonBorder" 
                                Value="{DynamicResource Control.MouseOver}"/>
                            <Setter 
                                Property="BorderBrush"
                                TargetName="radioButtonBorder" 
                                Value="{DynamicResource Control.AccentColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter 
                                Property="Background"
                                TargetName="radioButtonBorder" 
                                Value="{DynamicResource RadioButton.Disabled.Background}"/>
                            <Setter
                                Property="BorderBrush" 
                                TargetName="radioButtonBorder" 
                                Value="{DynamicResource RadioButton.Disabled.Border}"/>
                            <Setter 
                                Property="Fill" 
                                TargetName="optionMark" 
                                Value="{DynamicResource RadioButton.Disabled.Glyph}"/>
                            <Setter 
                                Property="TextElement.Foreground" 
                                TargetName="contentPresenter" 
                                Value="{DynamicResource Control.Disabled.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter 
                                Property="Background" 
                                TargetName="radioButtonBorder" 
                                Value="{DynamicResource Control.AccentColor}"/>
                            <Setter 
                                Property="BorderBrush" 
                                TargetName="radioButtonBorder" 
                                Value="{DynamicResource Control.AccentColor}"/>
                            <Setter 
                                Property="Fill" 
                                TargetName="optionMark" 
                                Value="{DynamicResource Control.Pressed.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter 
                                Property="Opacity" 
                                TargetName="optionMark" 
                                Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter 
                                Property="Opacity" 
                                TargetName="optionMark" 
                                Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>